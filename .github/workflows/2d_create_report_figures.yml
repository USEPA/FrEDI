### https://github.com/actions/upload-artifact
### https://github.blog/changelog/2021-11-10-github-actions-input-types-for-manual-workflows/
### https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
### https://github.com/r-lib/actions/tree/v2/setup-r-dependencies
### https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution
### Single line conditional can use ${{}} formulation. Multi-line conditional does not.
### For uploading artifacts:
###     "path:" is the output path where Pandoc will write the compiled PDF.
###      Note, this should be the same directory as the input paper.md
name: 2d. Test FrEDI Package

on:
  workflow_dispatch:
    inputs:
      sector:
        type: string
        description: Which sectors do you want to run? Enter "all", "gcm", "slr", or specific sector name
        default: "all"
      figure_type:
        type: choice
        description: Which type of report figure do you want to create?
        required: true
        default: Appendix figures
        options:
        - Appendix figures
        - Sector comparison
        - Both
      workflow_id:
        type: string
        description: Enter the workflow run ID from which to retrieve the scenario results
        default: 1


jobs:
  compile_data:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    name: Load Package Code
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Send input status
        run: |
          echo "ref_name     = ${{ github.ref_name }}"
          echo "sector       = ${{ inputs.sector }}"
          echo "figure_type  = ${{ inputs.figure_type }}"
          echo "workflow_id  = ${{ inputs.workflow_id }}"

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Setup R package dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache: true
          cache-version: 1
          packages: |
            any::tidyverse
            any::devtools
            any::openxlsx
            any::ggpubr

      ### Download tmp_sysdata.rda from 1. Compile Main FrEDI Data run
      - name: Download all artifacts
        # if: |
        #   inputs.dow_totals == 'true' ||
        #   inputs.dow_appendix == 'true'
        id:   download-artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ inputs.workflow_id }}
          path: .


      - name: Check artifacts
        # # if: ${{ inputs.dow_totals == 'true' || inputs.dow_appendix == 'true' }}
        # if: |
        #   inputs.dow_totals == 'true' ||
        #   inputs.dow_appendix == 'true'
        run: |
          ls -R ./scenario_results


      ### Install FrEDI from new branch and get results
      ### Install FrEDI from ref branch and get results
      - name: Test results
        # if: |
        #   inputs.dow_totals == 'true' ||
        #   inputs.dow_appendix == 'true'
        run: |
          Rscript -e '
            ###### Libraries ######
            require(tidyverse)
            require(devtools)
            require(openxlsx)
            require(ggpubr)

            ###### Workflow Inputs ######
            newBranch <- "${{ github.ref_name    }}"
            sectors0  <- "${{ inputs.sector      }}"
            figTypes0 <- "${{ inputs.figure_type }}"

            ###### Functions ######
            loadCode  <- function(files0){for(file_i in files0){file_i |> source(); rm(file_i)}}

            ###### Paths ######
            ### Main repo path, FrEDI project path, scripts path
            rPath0   <- ".";
            pPath0   <- rPath0

            ### Where to save results
            oPath0   <- pPath0 |> file.path("data_tests")
            oFileNew <- oPath0 |> file.path("newResults.rda")
            oFileRef <- oPath0 |> file.path("refResults.rda")

            ### Check if path exists and, if not, create it
            exists0  <- oPath0 |> dir.exists()
            if(!exists0) {oPath0 |> dir.create(recursive=TRUE)}

            ### Artifact path
            artDir   <- pPath0  |> file.path("scenario_results")
            oPath0  |> list.files() |> print();
            artDir  |> list.files() |> print();

            ###### Code ######
            ### Load scripts and testing functions
            sPath0   <- pPath0 |> file.path("scripts")
            tPath0   <- pPath0 |> file.path("testing")
            sFiles0  <- sPath0 |> list.files(full.names=TRUE)
            tFiles0     <- tPath0 |> list.files(full.names=TRUE)
            rmd_file    <- tFiles0[grepl(".*md",tFiles0)]
            tFiles0     <- tFiles0[!grepl(".*md",tFiles0)]
            sFiles0 |> loadCode()
            tFiles0 |> loadCode()
            # for(file_i in sFiles0){file_i |> source(); rm(file_i)}
            # for(file_i in tFiles0){file_i |> source(); rm(file_i)}

            ###### Install FrEDI from New Branch ######
            ### Action Arguments
            urlRepo  <- "https://github.com/USEPA/FrEDI"
            c(newBranch) |> print()

            ### Load FrEDI from source
            pPath0 |> devtools::load_all()

            ###### Sectors ######
            ### Format sector names
            sectors0 |> print()
            sectors    <- sectors0 |> get_action_sectors()
            sectors |> print()


            ###### Figure Types ######
            ### Format figure types
            figsLC0    <- figTypes0 |> tolower()
            doAppx     <- figsLC0 |> str_detect("appendix|both")
            doComp     <- figsLC0 |> str_detect("sector|both")
            ### Create a list
            doTotals   <- NULL
            figNames   <- c()
            if(doAppx){doTotals <- doTotals |> c(TRUE); figNames <- figNames |> c("appx")}
            if(doComp){doTotals <- doTotals |> c(TRUE ); figNames <- figNames |> c("comp")}

            ### Whether to make figures
            hasSectors <- (sectors |> length()) & !(sectors |> is.null())
            hasFigures <- doAppx | doComp
            hasData    <- FALSE


            ###### Load Data ######
            ### aggOnly=Whether to only include sectors for which "includeaggregate==1" in Fig 7 plots
            "Making figures..." |> print()

            ### GCM and SLR sectors
            ### Which data to load
            gcmSectors <- FrEDI::get_sectorInfo(gcmOnly=T)
            slrSectors <- FrEDI::get_sectorInfo(slrOnly=T)
            doGcm      <- (sectors %in% gcmSectors) |> any()
            doSlr      <- (sectors %in% slrSectors) |> any()

            ### Which years to report on for GCM, SLR sectors
            gcmYears0  <- c(2010, 2090)
            slrYears0  <- c(2050, 2090)

            ### Initialize data
            gcmData0   <- NULL
            slrData0   <- NULL

            ### Check if file exists and, if it does, load it
            ### - Load GCM data
            if (doGcm) {
              gcmName   <- "gcm_DOW_scenario_results" |> paste0(".", "rda")
              gcmPath   <- artDir  |> file.path(gcmName)
              gcmExists <- gcmPath |> file.exists()
              c(gcmPath) |> print(); gcmExists |> print()
              if(gcmExists) {
                gcmPath |> load()
                gcmData0 <- obj0
                rm(obj0)
                doGcm    <- !(gcmData0 |> is.null())
                hasData  <- hasData | doGcm
              } ### End if(gcmExists)
            } ### End if(doGcm)


            ### - Load SLR data
            if (doSlr) {
              slrName   <- "slr_scenario_results" |> paste0(".", "rda")
              slrPath   <- artDir  |> file.path(slrName)
              slrExists <- slrPath |> file.exists()
              c(slrPath) |> print(); slrExists |> print()
              if(slrExists) {
                slrPath |> load()
                slrData0 <- obj0
                rm(obj0)
                doSlr    <- !(slrData0 |> is.null())
                hasData  <- hasData | doSlr
              } ### End if(slrExists)
            } ### End if(doSlr)


            ###### Create Figures ######
            ### Whether to run the test
            makePlots  <- hasSectors & hasFigures & hasData
            makePlots |> print()
            ### gcmData=Dataframe with data for GCM sectors
            ### slrData=Dataframe with data for SLR sectors
            if(makePlots) {
              ### Number of digits for formatting sector names
              digits0   <- 16
              listPlots <- doTotals |> map(function(true0){
                create_DOW_plots(
                  sectors  = sectors,
                  gcmData  = gcmData0,
                  slrData  = slrData0,
                  gcmYears = gcmYears0,
                  slrYears = slrYears0,
                  totals   = true0,
                  aggOnly  = true0,
                  digits   = digits0,
                  silent   = TRUE ,
                  testing  = FALSE,
                  loadCode = "project",
                  fpath    = "."  ,
                  saveFile = TRUE ,
                  outPath  = oPath0,
                  img_dev  = "pdf",
                  return   = FALSE
                ) ### End create_DOW_plotsfunction
              })
            } ### End if(makePlots)
            "Finished creating figures..." |> print()
            oPath0 |> list.files() |> print()
          '

      - name: Upload Report Figures
        # if: |
        #   inputs.dow_totals == 'true' ||
        #   inputs.dow_appendix == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: report_figures
          path: |
            ./data_tests/*

